*******************************
***** Development Machine *****
*******************************

- Mac OS X 10.9.5
- VMWare Fusion: Version 6.0.4 (1887983)

*******************************
***** Ubuntu Installation *****
*******************************

- http://releases.ubuntu.com/12.04.5/
- 12.04.5 64 bit install
- Select "Desktop CD" for the ISO
- 64-bit PC (AMD64) desktop CD
- Disable 3-d graphics prior to installing
- Update recommended packages

*******************************************************************
***** Package modification for Android AOSP build environment *****
*******************************************************************

- Install package to meet AOSP package dependency requirements
    $ sudo apt-get install libglapi-mesa:i386

- AOSP package installation: https://source.android.com/source/initializing.html
    $ sudo apt-get install git gnupg flex bison gperf build-essential zip curl libc6-dev libncurses5-dev:i386
    $ sudo apt-get install x11proto-core-dev libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-glx:i386 
    $ sudo apt-get install libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386

- Java Installation
    - The master branch of Android in the Android Open Source Project (AOSP) requires Java 7. On Ubuntu, use OpenJDK.
    - To develop older versions of Android, download and install the corresponding version of the Java JDK:
        - Java 6: for Gingerbread through KitKat
        - Java 5: for Cupcake through Froyo
    - Android KitKat will be targeted
    - Here is a how-to-install reference
        - http://linuxg.net/how-to-install-oracle-java-jdk-678-on-ubuntu-13-04-12-10-12-04/ 
    - Some java version inspection commands:
        - Show all the Java versions installed:
            $ update-java-alternatives -l
        - Shows the Java version currently used and help:
            $ java -showversion
        - Shows the Java version only:
            $ java –version
    - open jdk packages reside on VM but not installed so no "sudo apt-get purge opendjdk" is necessary
    - Download and install Java: http://www.oracle.com/technetwork/java/javase/archive-139210.html
        $ chmod u+x jdk-6u45-linux-x64.bin
        $ ./jdk-6u45-linux-x64.bin
        $ sudo mkdir -p /usr/lib/jvm
        $ sudo mv jdk1.6.0_45 /usr/lib/jvm/
    - establish /etc/alternative links 
        $ sudo update-alternatives --install "/usr/bin/java" "java" "/usr/lib/jvm/jdk1.6.0_45/bin/java" 1
        $ sudo update-alternatives --install "/usr/bin/javac" "javac" "/usr/lib/jvm/jdk1.6.0_45/bin/javac" 1
        $ sudo update-alternatives --install "/usr/bin/javap" "javap" "/usr/lib/jvm/jdk1.6.0_45/bin/javap" 1
        $ sudo update-alternatives --install "/usr/bin/jar" "jar" "/usr/lib/jvm/jdk1.6.0_45/bin/jar" 1
        $ sudo update-alternatives --install "/usr/bin/javadoc" "javadoc" "/usr/lib/jvm/jdk1.6.0_45/bin/javadoc" 1

*****************************
***** AOSP Installation *****
*****************************

- Nexus 4 is mako
- From https://source.android.com/source/downloading.html:
    $ mkdir ~/bin
    // add to .profile 
    $ PATH=~/bin:$PATH
    $ mkdir –p ~/aospDevelopment/aosp
    $ cd ~/aospDevelopment/aosp
    $ repo init -u https://android.googlesource.com/platform/manifest -b android-4.4.4_r1
    $ repo sync
    // AOSP prebuilt kernel is in /device/lge/mako-kernel/
    // Interrogate this kernel for its version info
        $ dd if=kernel bs=1 skip=$(LC_ALL=C grep -a -b -o $'\x1f\x8b\x08\x00\x00\x00\x00\x00' kernel | cut -d ':' -f 1) | zgrep -a 'Linux version'
        // output is ...
        Linux version 3.4.0-perf-ga6edd5e (android-build@kpdm5.cbf.corp.google.com) (gcc version 4.7 (GCC) ) #1 SMP PREEMPT Wed Apr 16 09:33:17 PDT 2014
        Linux version CIFS VFS Client for Linux<7>%s: sess setup type %d
        6001273+0 records in
        6001273+0 records out
        6001273 bytes (6.0 MB) copied, 5.54971 s, 1.1 MB/s
    - a6edd5e is the branch of interest

***********************************************
***** Android Platform Build and Test HAL *****
***********************************************

- Build AOSP
	// apply patches
    $ source build/envsetup.sh
    $ lunch aosp_mako-userdebug
    $ make –j6
    $ adb reboot bootloader 
	// TODO fix fastboot tool to run without sudo
	$ sudo ~/aospDevelopment/aosp/out/host/linux-x86/bin/fastboot -w -pmako flashall

	// verify test of HAL module
	$ adb shell
	shell@mako:/ $ ls -l /system/lib/hw                                            
		...
		-rw-r--r-- root     root         5348 2015-05-29 17:46 canonical_char_drv.default.so

	shell@mako:/ $ ls -l /system/bin                                               
		...
		-rwxr-xr-x root     shell        5368 2015-06-14 21:34 test_canonical_char_drv

**********************************************
***** Android Platform Service Additions *****
**********************************************

- javah to create header file for jni
- create java class with desired native API signatures
- build the jar file
- javah on that jar file to construct the jni header

device/lge/mako/framework/libcanonical_char_io_jni/jni

$ javah -jni -d device/lge/mako/framework/libcanonical_char_io_jni/jni/ -classpath out/target/common/obj/JAVA_LIBRARIES/com.severs.android.lib.charactor_io_intermediates/classes.jar com.severs.android.lib.charactor_io.LibCharactorIO

- make HAL library
$ cd ~/aospDevelopment/aosp/device/lge/mako/framework/libcanonical_char_io_jni/java
$ mm com.severs.android.lib.charactor_io com.severs.android.lib.charactor_io.xml

- run Main java object to test the jni HAL wrapper
$ adb root
$ adb shell logcat -c // to clear logcat buffer if desired
$ adb shell dalvikvm -cp /system/framework/com.severs.android.lib.charactor_io.jar com.severs.android.lib.charactor_io.Main
$ adb shell logcat -d *:V > logcatEraseme
$ adb shell dmesg > dmesgEraseme
    
